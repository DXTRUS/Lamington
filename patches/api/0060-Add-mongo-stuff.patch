From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProdPreva1l <prod.preva1l@gmail.com>
Date: Wed, 1 May 2024 18:21:17 +1000
Subject: [PATCH] Add mongo stuff


diff --git a/build.gradle.kts b/build.gradle.kts
index 8559d0dffb9b364e25043460d80842f8beec598e..bab7b9ae42436137dced75d9ca5357bd18bf9721 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -73,6 +73,11 @@ dependencies {
 
     // Lamington start - add lombok
     implementation("redis.clients:jedis:5.1.0")
+    implementation("com.zaxxer:HikariCP:5.1.0")
+    implementation("org.xerial:sqlite-jdbc:3.45.2.0")
+    implementation("com.mysql:mysql-connector-j:8.3.0")
+    implementation("org.mariadb.jdbc:mariadb-java-client:3.3.3")
+    implementation("org.mongodb:mongodb-driver-sync:5.0.0")
     implementation("org.projectlombok:lombok:1.18.28")
     annotationProcessor("org.projectlombok:lombok:1.18.28")
     // Lamington end
diff --git a/src/main/java/net/dxtrus/utils/mongodb/CacheHandler.java b/src/main/java/net/dxtrus/utils/mongodb/CacheHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..668114eaa71064925f0603fc4ab4463ce8b585f0
--- /dev/null
+++ b/src/main/java/net/dxtrus/utils/mongodb/CacheHandler.java
@@ -0,0 +1,35 @@
+package net.dxtrus.utils.mongodb;
+
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
+import com.mongodb.client.MongoCollection;
+import com.mongodb.client.MongoDatabase;
+import org.bson.Document;
+
+import java.util.concurrent.TimeUnit;
+
+public class CacheHandler {
+    private final MongoConnectionHandler db;
+    private final Cache<String, MongoCollection<Document>> collectionCache = CacheBuilder.newBuilder().expireAfterWrite(30L, TimeUnit.MINUTES).build();
+
+    public CacheHandler(MongoConnectionHandler db) {
+        this.db = db;
+    }
+
+    public void updateCache(String collectionName) {
+        MongoDatabase database = db.getDatabase();
+        collectionCache.put(collectionName, database.getCollection(collectionName));
+    }
+
+    public void removeFromCache(String collectionName) {
+        MongoCollection<Document> cachedCollection = collectionCache.getIfPresent(collectionName);
+        if (cachedCollection != null) {
+            MongoDatabase database = db.getDatabase();
+            collectionCache.asMap().remove(collectionName, database.getCollection(collectionName));
+        }
+    }
+
+    public MongoCollection<Document> getCachedCollection(String collectionName) {
+        return collectionCache.getIfPresent(collectionName);
+    }
+}
diff --git a/src/main/java/net/dxtrus/utils/mongodb/CollectionHelper.java b/src/main/java/net/dxtrus/utils/mongodb/CollectionHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..278c2e1f0e4255b45a93d3e6e414bcdd84500bc4
--- /dev/null
+++ b/src/main/java/net/dxtrus/utils/mongodb/CollectionHelper.java
@@ -0,0 +1,44 @@
+package net.dxtrus.utils.mongodb;
+
+
+import com.mongodb.client.MongoCollection;
+import com.mongodb.client.MongoDatabase;
+import org.bson.Document;
+import org.bson.conversions.Bson;
+
+public class CollectionHelper {
+    private final MongoDatabase database;
+    private final CacheHandler cacheHandler;
+
+    public CollectionHelper(MongoDatabase database, CacheHandler cacheHandler) {
+        this.database = database;
+        this.cacheHandler = cacheHandler;
+    }
+
+    public void createCollection(String collectionName) {
+        database.createCollection(collectionName);
+        cacheHandler.updateCache(collectionName);
+    }
+    public MongoCollection<Document> getCollection(String collectionName) {
+        if (cacheHandler.getCachedCollection(collectionName) == null) createCollection(collectionName);
+        return cacheHandler.getCachedCollection(collectionName);
+    }
+
+    public void insertDocument(String collectionName, Document document) {
+        MongoCollection<Document> collection = database.getCollection(collectionName);
+        collection.insertOne(document);
+        cacheHandler.updateCache(collectionName);
+    }
+
+    public void updateDocument(String collectionName, Document document, Bson updates) {
+        MongoCollection<Document> collection = database.getCollection(collectionName);
+        collection.updateOne(document, updates);
+        cacheHandler.updateCache(collectionName);
+    }
+
+    public void deleteDocument(String collectionName, Document document) {
+        MongoCollection<Document> collection = database.getCollection(collectionName);
+        collection.deleteOne(document);
+        cacheHandler.removeFromCache(collectionName);
+    }
+}
diff --git a/src/main/java/net/dxtrus/utils/mongodb/MongoConnectionHandler.java b/src/main/java/net/dxtrus/utils/mongodb/MongoConnectionHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..3805a95c938947b03512a2a1dded690430fab25d
--- /dev/null
+++ b/src/main/java/net/dxtrus/utils/mongodb/MongoConnectionHandler.java
@@ -0,0 +1,85 @@
+package net.dxtrus.utils.mongodb;
+
+import com.mongodb.ConnectionString;
+import com.mongodb.MongoClientSettings;
+import com.mongodb.MongoCredential;
+import com.mongodb.ServerAddress;
+import com.mongodb.client.MongoClient;
+import com.mongodb.client.MongoClients;
+import com.mongodb.client.MongoDatabase;
+import lombok.Getter;
+import org.bson.UuidRepresentation;
+import java.util.Collections;
+
+@Getter
+public class MongoConnectionHandler {
+    private final MongoClient mongoClient;
+    private final MongoDatabase database;
+
+    /**
+     * Initiate a connection to a Mongo Server
+     * @param host The IP/Host Name of the Mongo Server
+     * @param port The Port of the Mongo Server
+     * @param username The Username of the user with the appropriate permissions
+     * @param password The Password of the user with the appropriate permissions
+     * @param databaseName The database to use.
+     */
+    public MongoConnectionHandler(String host, int port, String username, String password, String databaseName) {
+        ServerAddress serverAddress = new ServerAddress(host, port);
+        MongoCredential credential = MongoCredential.createCredential(username, databaseName, password.toCharArray());
+
+        MongoClientSettings settings = MongoClientSettings.builder()
+                .credential(credential)
+                .applyToClusterSettings(builder -> builder.hosts(Collections.singletonList(serverAddress)))
+                .build();
+
+        this.mongoClient = MongoClients.create(settings);
+        this.database = mongoClient.getDatabase(databaseName);
+    }
+
+    /**
+     * Initiate a connection to a Mongo Server
+     * @param host The IP/Host Name of the Mongo Server
+     * @param port The Port of the Mongo Server
+     * @param username The Username of the user with the appropriate permissions
+     * @param password The Password of the user with the appropriate permissions
+     * @param databaseName The database to use.
+     * @param authDb The database to authenticate with.
+     */
+    public MongoConnectionHandler(String host, int port, String username, String password, String databaseName, String authDb) {
+        ServerAddress serverAddress = new ServerAddress(host, port);
+        MongoCredential credential = MongoCredential.createCredential(username, authDb, password.toCharArray());
+
+        MongoClientSettings settings = MongoClientSettings.builder()
+                .credential(credential)
+                .applyToClusterSettings(builder -> builder.hosts(Collections.singletonList(serverAddress)))
+                .build();
+
+        this.mongoClient = MongoClients.create(settings);
+        this.database = mongoClient.getDatabase(databaseName);
+    }
+
+    /**
+     * Initiate a connection to a Mongo Server
+     * @param uri MongoDB Connection URI
+     * @param dbName The database to connect to
+     */
+    public MongoConnectionHandler(String uri, String dbName) {
+        final MongoClientSettings settings = MongoClientSettings.builder()
+                .applyConnectionString(new ConnectionString(uri))
+                .uuidRepresentation(UuidRepresentation.STANDARD)
+                .build();
+
+        this.mongoClient = MongoClients.create(settings);
+        this.database = mongoClient.getDatabase(dbName);
+    }
+
+    /**
+     * Close the connection with the database
+     */
+    public void closeConnection() {
+        if (this.mongoClient != null) {
+            this.mongoClient.close();
+        }
+    }
+}
