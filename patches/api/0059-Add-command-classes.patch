From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProdPreva1l <prod.preva1l@gmail.com>
Date: Wed, 1 May 2024 17:47:03 +1000
Subject: [PATCH] Add command classes

* Add javadocs

diff --git a/src/main/java/net/dxtrus/LamingtonPlugin.java b/src/main/java/net/dxtrus/LamingtonPlugin.java
index 6f9db8459e2e0b52e843dc0192bceb6cb50cdf96..454d47d9c37c028125154521096819e45daf2813 100644
--- a/src/main/java/net/dxtrus/LamingtonPlugin.java
+++ b/src/main/java/net/dxtrus/LamingtonPlugin.java
@@ -1,5 +1,6 @@
 package net.dxtrus;
 
+import net.dxtrus.commands.CommandManager;
 import net.dxtrus.logger.LamingtonLogger;
 import net.dxtrus.utils.BungeeMessenger;
 import org.bukkit.plugin.java.JavaPlugin;
@@ -8,6 +9,7 @@ import org.jetbrains.annotations.NotNull;
 public abstract class LamingtonPlugin extends JavaPlugin {
     private static LamingtonLogger console;
     private BungeeMessenger bungeeMessenger;
+    private CommandManager commandManager;
 
     public abstract void startPlugin();
     public abstract void stopPlugin();
@@ -18,6 +20,7 @@ public abstract class LamingtonPlugin extends JavaPlugin {
 
         console = new LamingtonLogger(this);
         bungeeMessenger = new BungeeMessenger(this);
+        commandManager = new CommandManager(this);
         getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");
     }
     @Override
@@ -35,6 +38,11 @@ public abstract class LamingtonPlugin extends JavaPlugin {
         return bungeeMessenger;
     }
 
+    @NotNull
+    public CommandManager getCommandManager() {
+        return commandManager;
+    }
+
     /**
      * Get the instance of {@link LamingtonLogger}
      * makes one if none exists
diff --git a/src/main/java/net/dxtrus/commands/Command.java b/src/main/java/net/dxtrus/commands/Command.java
new file mode 100644
index 0000000000000000000000000000000000000000..05155387c6eaf7f0256564738df379f46d8c789e
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/Command.java
@@ -0,0 +1,185 @@
+package net.dxtrus.commands;
+
+import lombok.Getter;
+import net.dxtrus.LamingtonPlugin;
+import net.dxtrus.utils.Text;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.ConsoleCommandSender;
+import org.bukkit.command.defaults.BukkitCommand;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.util.StringUtil;
+import org.checkerframework.common.returnsreceiver.qual.This;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+@Getter
+public abstract class Command {
+
+    public LamingtonPlugin plugin;
+    private CommandExecutor executor;
+    private CommandArgs assigned;
+    private boolean senderHasPermission = false;
+
+    /**
+     * A new lamington command
+     * @param plugin your plugin
+     */
+    public Command(LamingtonPlugin plugin) {
+        this.plugin = plugin;
+        this.register();
+    }
+
+    /**
+     * Register the command
+     */
+    @ApiStatus.Internal
+    public void register() {
+        this.assigned = Arrays.stream(this.getClass().getMethods()).filter(method -> method.getAnnotation(CommandArgs.class) != null).map(method -> method.getAnnotation(CommandArgs.class)).findFirst().orElse(null);
+
+        if (assigned != null) {
+            this.executor = new CommandExecutor(assigned.name(), assigned);
+            plugin.getCommandManager().registerCommand(this, executor);
+        }
+    }
+
+    /**
+     * Calls the command
+     * @param command the args for the command
+     */
+    @ApiStatus.Internal
+    public abstract void execute(@NotNull CommandArguments command);
+
+    /**
+     * Override this to do tab completion
+     * @param command the command that is getting tab completed
+     * @return list of the things to tab complete
+     */
+    public List<String> onTabComplete(CommandArguments command) {
+        return new ArrayList<>();
+    }
+
+    /**
+     * This is default tab complete which should return a list of online players
+     */
+    @ApiStatus.Internal
+    public List<String> getDefaultTabComplete(CommandArguments command) {
+        List<String> completors = new ArrayList<>();
+
+        List<String> values = Bukkit.getOnlinePlayers().stream().map(HumanEntity::getName).toList();
+
+        String[] args = command.args();
+
+        if (args.length == 0) return new ArrayList<>();
+
+        if (!args[args.length - 1].equalsIgnoreCase("")) {
+            values.forEach(value -> {
+                if (value.toLowerCase().startsWith(args[args.length - 1].toLowerCase())) {
+                    completors.add(value);
+                }
+            });
+        } else {
+            completors.addAll(values);
+        }
+        return completors;
+    }
+
+    /**
+     * Use this to tab complete your sub commands
+     * @param command the command getting completed
+     * @param subCommands a list of your sub commands (constructed in your command initializer)
+     * @return a list of your subcommands that automatically filters as the user types
+     */
+    public List<String> subCommandsTabCompleter(CommandArguments command, List<SubCommand> subCommands) {
+        List<String> completions = new ArrayList<>();
+        List<String> ret = new ArrayList<>();
+        if (command.args().length != 1) return completions;
+        for (SubCommand subCommand : subCommands) {
+            if (!command.sender().hasPermission(subCommand.getAssigned().permission())) continue;
+            ret.add(subCommand.getAssigned().name());
+            Collections.addAll(ret, subCommand.getAssigned().aliases());
+        }
+        StringUtil.copyPartialMatches(command.args()[0], ret, completions);
+        return completions;
+    }
+
+    /**
+     * This one's hard to explain so here's a code snippet:
+     * <pre>{@code
+     * if (command.args().length >= 1) {
+     *   if (subCommandExecutor(command, subCommands)) return;
+     *   command.sender().sendMessage(Lang.PREFIX.toFormattedString() + Text.colorize("&cThis command does not exist!"));
+     *   return;
+     * }
+     * }</pre>
+     * @param command the root command get executed
+     * @param subCommands a list of your sub commands (constructed in your command initializer)
+     * @return true if command exists false if not
+     */
+    public boolean subCommandExecutor(@NotNull CommandArguments command, List<SubCommand> subCommands) {
+        for (SubCommand subCommand : subCommands) {
+            if (command.args()[0].equalsIgnoreCase(subCommand.getAssigned().name()) || Arrays.stream(subCommand.getAssigned().aliases()).toList().contains(command.args()[0])) {
+                subCommand.executor(command.sender(), command.label(), command.args());
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * You can safely ignore this class
+     */
+    @ApiStatus.Internal
+    public class CommandExecutor extends BukkitCommand {
+
+        private final boolean inGameOnly;
+        private final boolean async;
+        private CommandArguments executeArguments;
+
+        public CommandExecutor(String name, CommandArgs assigned) {
+            super(name);
+            this.setAliases(Arrays.asList(assigned.aliases()));
+            this.setPermission(assigned.permission());
+            this.inGameOnly = assigned.inGameOnly();
+            this.async = assigned.async();
+        }
+
+        @Override
+        public boolean execute(@NotNull CommandSender sender, @NotNull String label, @NotNull String[] args) {
+            if (this.inGameOnly && sender instanceof ConsoleCommandSender) {
+                sender.sendMessage(Text.message("&cYou must be a player to run this command!"));
+                return false;
+            }
+            if (this.getPermission() != null && !sender.hasPermission(this.getPermission())) {
+                senderHasPermission = false;
+                sender.sendMessage(Text.message("&cNo Permission!"));
+                return false;
+            }
+
+            this.executeArguments = new CommandArguments(sender, label, args);
+
+            if (this.async) {
+                Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> Command.this.execute(executeArguments));
+            } else {
+                Command.this.execute(executeArguments);
+            }
+            return false;
+        }
+
+        @NotNull
+        @Override
+        public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+            List<String> completors = onTabComplete(new CommandArguments(sender, null, args));
+
+            if (completors.isEmpty()) {
+                completors.addAll(getDefaultTabComplete(new CommandArguments(sender, null, args)));
+            }
+            return completors;
+        }
+    }
+}
diff --git a/src/main/java/net/dxtrus/commands/CommandArgs.java b/src/main/java/net/dxtrus/commands/CommandArgs.java
new file mode 100644
index 0000000000000000000000000000000000000000..c80da4e655a35953d3cab321eb3b7337941b5b33
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/CommandArgs.java
@@ -0,0 +1,16 @@
+package net.dxtrus.commands;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface CommandArgs {
+    String name();
+    String permission() default "";
+    String[] aliases() default {};
+    boolean inGameOnly() default true;
+    boolean async() default false;
+}
diff --git a/src/main/java/net/dxtrus/commands/CommandArguments.java b/src/main/java/net/dxtrus/commands/CommandArguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..d18d5938a7b5d0dd165defadc0296e38016894ad
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/CommandArguments.java
@@ -0,0 +1,17 @@
+package net.dxtrus.commands;
+
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.Nullable;
+
+public record CommandArguments(CommandSender sender, String label, String[] args) {
+    /**
+     * Get the player instead of sender, you can safely use {@code assert commandArguments.getPlayer() != null} if you have specified in the @CommandArgs that it is in game only
+     * @return the player, null if the sender is console
+     */
+    @Nullable
+    public Player getPlayer() {
+        if (!(sender instanceof Player)) return null;
+        return (Player) sender;
+    }
+}
diff --git a/src/main/java/net/dxtrus/commands/CommandManager.java b/src/main/java/net/dxtrus/commands/CommandManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..eae9f28991aaafa71627ae523ef6fdb3ba988bb5
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/CommandManager.java
@@ -0,0 +1,32 @@
+package net.dxtrus.commands;
+
+import lombok.Getter;
+import net.dxtrus.LamingtonPlugin;
+import org.jetbrains.annotations.ApiStatus;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Getter
+public class CommandManager {
+
+    private final LamingtonPlugin plugin;
+
+    public CommandManager(LamingtonPlugin plugin) {
+        this.plugin = plugin;
+    }
+
+    private final List<Command> loadedCommands = new ArrayList<>();
+
+    /**
+     * Register a command to the server
+     * @param base the command
+     * @param command the executor
+     */
+    @ApiStatus.Internal
+    public void registerCommand(Command base, Command.CommandExecutor command) {
+        plugin.getServer().getCommandMap();
+        plugin.getServer().getCommandMap().register(plugin.getDescription().getName().toLowerCase(), command);
+        loadedCommands.add(base);
+    }
+}
diff --git a/src/main/java/net/dxtrus/commands/SubCommand.java b/src/main/java/net/dxtrus/commands/SubCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..1b28a327f2ba1cbdf40047a5d4742e96d7a71e4d
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/SubCommand.java
@@ -0,0 +1,67 @@
+package net.dxtrus.commands;
+
+import lombok.Getter;
+import net.dxtrus.LamingtonPlugin;
+import net.dxtrus.utils.Text;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.ConsoleCommandSender;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+
+@Getter
+public abstract class SubCommand {
+
+    public LamingtonPlugin plugin;
+    private final SubCommandArgs assigned;
+    private SubCommandArguments executeArguments;
+    private boolean senderHasPermission = false;
+
+    /**
+     * A new lamington sub command
+     * @param plugin your plugin
+     */
+    public SubCommand(LamingtonPlugin plugin) {
+        this.plugin = plugin;
+        this.assigned = Arrays.stream(this.getClass().getMethods()).filter(method -> method.getAnnotation(SubCommandArgs.class) != null).map(method -> method.getAnnotation(SubCommandArgs.class)).findFirst().orElse(null);
+    }
+
+    /**
+     * Calls the sub command
+     * @param command the sub command args
+     */
+    public abstract void execute(@NotNull SubCommandArguments command);
+
+    /**
+     * This actually executes the sub command
+     * @param sender command sender
+     * @param label the original command
+     * @param args the args of the original command
+     */
+    @ApiStatus.Internal
+    public final void executor(@NotNull CommandSender sender, @NotNull String label, @NotNull String[] args) {
+        if (this.assigned.inGameOnly() && sender instanceof ConsoleCommandSender) {
+            sender.sendMessage(Text.message("&cYou must be a player to run this command!"));
+            return;
+        }
+        if (this.assigned.permission() != null && !sender.hasPermission(this.assigned.permission())) {
+            senderHasPermission = false;
+            sender.sendMessage(Text.message("&cNo Permission!"));
+            return;
+        }
+
+        if (args.length == 0) {
+            this.executeArguments = new SubCommandArguments(sender, label, new String[0], this.assigned.async(), this.assigned.inGameOnly());
+        } else {
+            this.executeArguments = new SubCommandArguments(sender, label, Arrays.copyOfRange(args, 1, args.length), this.assigned.async(), this.assigned.inGameOnly());
+        }
+
+        if (this.assigned.async()) {
+            Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> this.execute(executeArguments));
+        } else {
+            Bukkit.getScheduler().runTask(plugin, () -> this.execute(executeArguments));
+        }
+    }
+}
diff --git a/src/main/java/net/dxtrus/commands/SubCommandArgs.java b/src/main/java/net/dxtrus/commands/SubCommandArgs.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad3eba5f8cf0a5692b65d00292b33ccc547a4c3b
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/SubCommandArgs.java
@@ -0,0 +1,16 @@
+package net.dxtrus.commands;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.METHOD)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface SubCommandArgs {
+    String name();
+    String permission() default "";
+    String[] aliases() default {};
+    boolean inGameOnly() default true;
+    boolean async() default false;
+}
diff --git a/src/main/java/net/dxtrus/commands/SubCommandArguments.java b/src/main/java/net/dxtrus/commands/SubCommandArguments.java
new file mode 100644
index 0000000000000000000000000000000000000000..32dda51f98fb58e4649d3acfeb288b68d801e20b
--- /dev/null
+++ b/src/main/java/net/dxtrus/commands/SubCommandArguments.java
@@ -0,0 +1,16 @@
+package net.dxtrus.commands;
+
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+public record SubCommandArguments(CommandSender sender, String label, String[] args, boolean async, boolean inGameOnly) {
+    /**
+     * Get the player instead of sender, you can safely use {@code assert subCommandArguments.getPlayer() != null} if you have specified in the @SubCommandArgs that it is in game only
+     * @return the player, null if the sender is console
+     */
+    public Player getPlayer() {
+        if (inGameOnly) return (Player) sender;
+        if (!(sender instanceof Player)) return null;
+        return (Player) sender;
+    }
+}
