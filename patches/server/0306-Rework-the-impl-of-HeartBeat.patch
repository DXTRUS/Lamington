From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ProdPreva1l <prod.preva1l@gmail.com>
Date: Fri, 26 Apr 2024 01:40:25 +1000
Subject: [PATCH] Rework the impl of HeartBeat


diff --git a/src/main/java/net/dxtrus/DxtrusConfig.java b/src/main/java/net/dxtrus/DxtrusConfig.java
index 1a502ca9dd30282e690f9690835f71470c8f983a..7fb6477310d9c621eac3ba00e6693f372c49ad04 100644
--- a/src/main/java/net/dxtrus/DxtrusConfig.java
+++ b/src/main/java/net/dxtrus/DxtrusConfig.java
@@ -137,12 +137,12 @@ public class DxtrusConfig {
     public static int redisPort = 6379;
     public static String redisPassword = "P4s5W0rd!";
     private static void general() {
-        serverName = getString("server-name", "server-01");
+        serverName = getString("server-name", serverName);
 
-        heartBeatEnabled = getBoolean("heartbeat.is-enabled", false);
+        heartBeatEnabled = getBoolean("heartbeat.enabled", heartBeatEnabled);
 
-        redisHost = getString("redis.host", "127.0.0.1");
-        redisPort = getInt("redis.port", 6379);
-        redisPassword = getString("redis.port", "P4s5W0rd!");
+        redisHost = getString("redis.host", redisHost);
+        redisPort = getInt("redis.port", redisPort);
+        redisPassword = getString("redis.port", redisPassword);
     }
 }
diff --git a/src/main/java/net/dxtrus/Lamington.java b/src/main/java/net/dxtrus/Lamington.java
new file mode 100644
index 0000000000000000000000000000000000000000..6cd363fd11ee1e564de1793899ea374656bc77c0
--- /dev/null
+++ b/src/main/java/net/dxtrus/Lamington.java
@@ -0,0 +1,46 @@
+package net.dxtrus;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class Lamington {
+
+    public static class Logs {
+        private static final Logger logger = Logger.getLogger("Lamington");
+
+
+        public static void info(String message) {
+            if (DxtrusConfig.verbose) {
+                logger.log(Level.INFO, message);
+            }
+        }
+        public static void info(String message, boolean bypassVerboseCheck) {
+            if (bypassVerboseCheck || DxtrusConfig.verbose) {
+                logger.log(Level.INFO, message);
+            }
+        }
+
+        public static void log(Level level, String message) {
+            if (DxtrusConfig.verbose) {
+                logger.log(level, message);
+            }
+        }
+
+        public static void log(Level level, String message, boolean bypassVerboseCheck) {
+            if (bypassVerboseCheck || DxtrusConfig.verbose) {
+                logger.log(level, message);
+            }
+        }
+
+        public static void log(Level level, String message, Exception e) {
+            if (DxtrusConfig.verbose) {
+                logger.log(level, message, e);
+            }
+        }
+        public static void log(Level level, String message, Exception e, boolean bypassVerboseCheck) {
+            if (bypassVerboseCheck || DxtrusConfig.verbose) {
+                logger.log(level, message, e);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/dxtrus/heartbeat/HeartBeat.java b/src/main/java/net/dxtrus/heartbeat/ImplHeartBeat.java
similarity index 75%
rename from src/main/java/net/dxtrus/heartbeat/HeartBeat.java
rename to src/main/java/net/dxtrus/heartbeat/ImplHeartBeat.java
index abe5786c5d0efd2b8da76442d2b4051b16cb5a9c..74464d7a05b87652e3424e8adb6d7b3eac6fe154 100644
--- a/src/main/java/net/dxtrus/heartbeat/HeartBeat.java
+++ b/src/main/java/net/dxtrus/heartbeat/ImplHeartBeat.java
@@ -3,8 +3,11 @@ package net.dxtrus.heartbeat;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import net.dxtrus.DxtrusConfig;
+import net.dxtrus.Lamington;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import redis.clients.jedis.Jedis;
 import redis.clients.jedis.JedisPoolConfig;
 import redis.clients.jedis.JedisPool;
@@ -15,16 +18,16 @@ import java.util.Map;
 import java.util.logging.Level;
 
 @SuppressWarnings("unused")
-public class HeartBeat {
+public class ImplHeartBeat implements net.dxtrus.HeartBeat.HeartBeat {
     private static Pool<Jedis> pool;
     private static String currentServer;
     private static final Map<String, JsonObject> servers = new HashMap<>();
 
-    public HeartBeat() {
+    public ImplHeartBeat() {
         currentServer = DxtrusConfig.serverName;
 
         Bukkit.getScheduler().runTaskAsynchronously(new MinecraftInternalPlugin(), () -> {
-            log("Lamington is connecting to redis pool...");
+            Lamington.Logs.info("Lamington is connecting to redis pool...");
             try {
                 final JedisPoolConfig config = new JedisPoolConfig();
                 config.setMaxIdle(2);
@@ -36,7 +39,7 @@ public class HeartBeat {
                 Bukkit.getLogger().log(Level.SEVERE, "Lamington failed to connect to Redis: ", e);
                 throw new RuntimeException(e);
             }
-            log("Lamington successfully connected to Redis!");
+            Lamington.Logs.info("Lamington successfully connected to Redis!");
         });
 
         Bukkit.getScheduler().runTaskTimerAsynchronously(new MinecraftInternalPlugin(), this::startMonitoring, 1L, 20L);
@@ -63,7 +66,7 @@ public class HeartBeat {
         try (Jedis jedis = pool.getResource()) {
             jedis.hset("lamington_heartbeat", currentServer, serverDataJson);
         } catch (Exception e) {
-            Bukkit.getLogger().log(Level.SEVERE, "Lamington failed to send server data with redis: ", e);
+            Lamington.Logs.log(Level.SEVERE, "Lamington failed to send server data with redis: ", e, true);
         }
     }
 
@@ -75,42 +78,36 @@ public class HeartBeat {
                 servers.put(key, JsonParser.parseString(temp.get(key)).getAsJsonObject());
             }
         } catch (Exception e) {
-            Bukkit.getLogger().log(Level.SEVERE, "Lamington failed to get server data from redis: ", e);
+            Lamington.Logs.log(Level.SEVERE, "Lamington failed to get server data from redis: ", e, true);
         }
     }
 
     public void shutdown() {
-        log("Lamington is disconnecting from redis...");
+        Lamington.Logs.info("Lamington is disconnecting from redis...");
         if (pool != null) {
             pool.close();
         }
-        log("Lamington has disconnected from redis!");
-    }
-
-    private void log(String message) {
-        if (DxtrusConfig.verbose) {
-            Bukkit.getLogger().log(Level.INFO, message);
-        }
-    }
-    private void log(String message, Exception e) {
-        if (DxtrusConfig.verbose) {
-            Bukkit.getLogger().log(Level.SEVERE, message, e);
-        }
+        Lamington.Logs.info("Lamington has disconnected from redis!");
     }
 
     // Getters
-    public static String getCurrentServer() {
+    @Override
+    public @NotNull String getCurrentServer() {
         return currentServer;
     }
-    public static Map<String, JsonObject> getServers() {
+    @Override
+    public @NotNull Map<String, JsonObject> getServers() {
         return servers;
     }
 
-    public static JsonObject getServerObject(String server) {
+    @Nullable
+    @Override
+    public JsonObject getServerObject(@NotNull String server) {
         return servers.get(server);
     }
 
-    public static int getPlayerCount(String server) {
+    @Override
+    public Integer getPlayerCount(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             return Integer.parseInt(serverObj.get("onlinePlayers").toString());
@@ -118,7 +115,8 @@ public class HeartBeat {
         return 0;
     }
 
-    public static double getTPS(String server) {
+    @Override
+    public Double getTPS(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             return Double.parseDouble(serverObj.get("tps").toString());
@@ -126,7 +124,8 @@ public class HeartBeat {
         return 00.0;
     }
 
-    public static double getMSPT(String server) {
+    @Override
+    public Double getMSPT(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             return Double.parseDouble(serverObj.get("mspt").toString());
@@ -134,7 +133,8 @@ public class HeartBeat {
         return 00.0;
     }
 
-    public static boolean isOnline(String server) {
+    @Override
+    public Boolean isOnline(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             return Long.parseLong(serverObj.get("lastHeartBeat").toString()) >= System.currentTimeMillis() - 4000;
@@ -142,7 +142,8 @@ public class HeartBeat {
         return false;
     }
 
-    public static long[] getOnlineTime(String server) {
+    @Override
+    public Long[] getOnlineTime(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             long milliOnline = Long.parseLong(serverObj.get("lastHeartBeat").toString()) - Long.parseLong(serverObj.get("startTime").toString());
@@ -153,24 +154,26 @@ public class HeartBeat {
             hours %= 24;
             minutes %= 60;
             seconds %= 60;
-            return new long[]{days, hours, minutes, seconds};
+            return new Long[]{days, hours, minutes, seconds};
         }
-        return new long[]{0, 0, 0, 0};
+        return new Long[]{0L, 0L, 0L, 0L};
     }
 
-    public static long getLastHeartbeat(String server) {
+    @Override
+    public Long getLastHeartbeat(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             return Long.parseLong(serverObj.get("lastHeartBeat").toString());
         }
-        return 0;
+        return 0L;
     }
 
-    public static long getStartTime(String server) {
+    @Override
+    public Long getStartTime(@NotNull String server) {
         JsonObject serverObj = getServerObject(server);
         if (serverObj != null) {
             return Long.parseLong(serverObj.get("startTime").toString());
         }
-        return 0;
+        return 0L;
     }
 }
diff --git a/src/main/java/net/dxtrus/heartbeat/MonitoringTask.java b/src/main/java/net/dxtrus/heartbeat/MonitoringTask.java
deleted file mode 100644
index 0079be73ef94a6578d9d4100bfb44691266e2f0e..0000000000000000000000000000000000000000
--- a/src/main/java/net/dxtrus/heartbeat/MonitoringTask.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package net.dxtrus.heartbeat;
-
-import org.bukkit.scheduler.BukkitRunnable;
-
-public class MonitoringTask extends BukkitRunnable {
-    private static MonitoringTask instance;
-    @Override
-    public void run() {
-
-    }
-
-    public static MonitoringTask instance() {
-        if (instance == null) {
-            instance = new MonitoringTask();
-        }
-        return instance;
-    }
-}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 60b5e0643d933393b5473681ac9261db29fe2416..8109a3dfddf613c362144867fe355e1956df88dc 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -54,6 +54,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import net.dxtrus.HeartBeat.HeartBeat;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -2954,4 +2955,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
     // Paper end - Add tick times API and /mspt command
+
+    // Lamington start
+    @Nullable
+    public abstract HeartBeat getHeartBeat();
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ad4c45a8934652b8379ce093c529ccbbf0826d02..a230e937f996ceb1e525fd271c3012a369c27a8e 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,31 +1,25 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import net.dxtrus.DxtrusConfig;
-import net.dxtrus.heartbeat.HeartBeat;
+import net.dxtrus.HeartBeat.HeartBeat;
+import net.dxtrus.heartbeat.ImplHeartBeat;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
 import net.minecraft.SystemReport;
-import net.minecraft.Util;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.ConsoleInput;
@@ -60,7 +54,6 @@ import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
 import org.bukkit.command.CommandSender;
-import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable; // Paper
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -83,7 +76,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     @Nullable
     private final TextFilterClient textFilterClient;
     @Nullable
-    private HeartBeat dxtrusHeartBeat;
+    private ImplHeartBeat dxtrusHeartBeat;
 
     // CraftBukkit start - Signature changed
     public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
@@ -344,7 +337,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.loadLevel(this.storageSource.getLevelId()); // CraftBukkit
             // Dxtrus start - heartbeat monitoring
             if (DxtrusConfig.heartBeatEnabled) {
-                dxtrusHeartBeat = new HeartBeat();
+                dxtrusHeartBeat = new ImplHeartBeat();
             }
             // Dxtrus end
 
@@ -914,4 +907,12 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         return this.console;
     }
     // CraftBukkit end
+
+    // Lamington start
+    @Override
+    @Nullable
+    public HeartBeat getHeartBeat() {
+        return dxtrusHeartBeat;
+    }
+    // Lamington end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 32c22a91deefb810805ec5f61f1d9e4375f38e38..bc9376ad9b6d38f5281a05f6e10665565b301a65 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -43,6 +43,7 @@ import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 // import jline.console.ConsoleReader;
+import net.dxtrus.HeartBeat.HeartBeat;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -1651,6 +1652,7 @@ public final class CraftServer implements Server {
     public void clearBlockHighlights() {
         this.worlds.forEach((name, world) -> clearBlockHighlights());
     }
+
     // Purpur End
 
     @Override
@@ -3356,4 +3358,12 @@ public final class CraftServer implements Server {
         return getServer().lagging;
     }
     // Purpur end
+
+    // Lamington start
+    @Override
+    @Nullable
+    public HeartBeat getHeartBeat() {
+        return getServer().getHeartBeat();
+    }
+    // Lamington end
 }
